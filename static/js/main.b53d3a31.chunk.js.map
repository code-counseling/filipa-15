{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","form","display","justifyItems","margin","width","App","classes","useState","correctCount","setCorrectCount","onCorrect","console","log","prev","position","tf","label","expectedAnswer","className","Typography","variant","style","color","noValidate","autoComplete","Alert","severity","icon","AlertTitle","SmartTextField","hidden","isAlreadyCorrect","value","setValue","Hidden","xlDown","TextField","onChange","e","v","target","toLowerCase","InputProps","readOnly","endAdornment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0UAQMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,QAAS,OACTC,aAAc,SACd,uBAAwB,CACtBC,OAAQ,EACRC,MAAO,WAKAC,EAAM,WACjB,IAAMC,EAAUR,IADO,EAEiBS,mBAAiB,GAFlC,mBAEhBC,EAFgB,KAEFC,EAFE,KAGjBC,EAAY,WAChBC,QAAQC,IAAI,KACZH,GAAgB,SAAAI,GAAI,OAAIA,EAAO,MAE7BC,EAAW,EACTC,EAAK,SAACC,EAAeC,GAAhB,OACT,cAAC,EAAD,CACEH,SAAUA,IACVE,MAAOA,EACPC,eAAgBA,EAChBT,aAAcA,EACdE,UAAWA,KAGf,OACE,sBAAKQ,UAAU,MAAf,UACE,cAACC,EAAA,EAAD,CAAYC,QAAS,KAArB,mCACA,eAACD,EAAA,EAAD,CAAYC,QAAS,KAArB,qBAEE,uBAFF,YAIE,uBACA,cAAC,IAAD,CAAUC,MAAO,CAAEC,MAAO,iBAE5B,uBAAMJ,UAAWZ,EAAQN,KAAMuB,YAAU,EAACC,aAAa,MAAvD,UACGT,EAAG,+BAAgC,UACnCA,EAAG,8BAA+B,QAClCA,EAAG,oCAAqC,QACxCA,EAAG,2BAA4B,SAC/BA,EAAG,kCAAgC,SACnCA,EAAG,yCAAqC,MACxCA,EAAG,oCAAgC,QACnCA,EAAG,sBAAuB,SAC1BA,EAAG,8BAA+B,KAClCA,EAAG,8BAA+B,aAClCA,EAAG,gCAAiC,KACpCA,EAAG,gBAAc,QACjBA,EAAG,gBAAc,KACjBA,EAAG,iBAAkB,QACrBA,EAAG,yBAA0B,MAC7BP,GAAgBM,GACf,eAACW,EAAA,EAAD,CAAOC,SAAS,UAAUC,MAAM,EAAhC,UACE,cAACC,EAAA,EAAD,oCADF,uCAEE,uBACA,uBAHF,iDAoBJC,EAAiB,SAAC,GAAyE,IAAvEf,EAAsE,EAAtEA,SAAUE,EAA4D,EAA5DA,MAAOC,EAAqD,EAArDA,eAAgBT,EAAqC,EAArCA,aAAcE,EAAuB,EAAvBA,UACjEoB,EAAStB,EAAeM,EACxBiB,EAAmBvB,EAAeM,EAFsD,EAGpEP,mBAAiB,IAHmD,mBAGvFyB,EAHuF,KAGhFC,EAHgF,KAW9F,OACE,cAACC,EAAA,EAAD,CAAQC,OAAQL,EAAhB,SACE,cAACM,EAAA,EAAD,CACEJ,MAAOA,EACPhB,MAAK,UAAKF,EAAW,EAAhB,aAAsBE,GAC3BqB,SAZW,SAACC,GAChB,IAAMC,EAAID,EAAEE,OAAOR,MACfO,EAAEE,gBAAkBxB,EAAewB,eAAkBV,GACvDrB,IAEFuB,EAASM,IAQLG,WAAY,CACVC,SAAUZ,EACVa,aAAcb,EACZ,cAAC,IAAD,CAAWV,MAAO,CAAEC,MAAO,WAEjB,KAAVU,GAAgB,cAAC,IAAD,CAAWX,MAAO,CAAEC,MAAO,kBC3FxCuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b53d3a31.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './App.css'\nimport { Hidden, makeStyles, TextField, Typography } from '@material-ui/core'\nimport CakeIcon from '@material-ui/icons/Cake'\nimport CheckIcon from '@material-ui/icons/Check'\nimport ErrorIcon from '@material-ui/icons/ErrorOutline'\nimport { Alert, AlertTitle } from '@material-ui/lab'\n\nconst useStyles = makeStyles({\n  form: {\n    display: 'grid',\n    justifyItems: 'center',\n    '& .MuiTextField-root': {\n      margin: 8,\n      width: '27ch',\n    },\n  },\n})\n\nexport const App = () => {\n  const classes = useStyles()\n  const [correctCount, setCorrectCount] = useState<number>(0)\n  const onCorrect = () => {\n    console.log('*')\n    setCorrectCount(prev => prev + 1)\n  }\n  let position = 0\n  const tf = (label: string, expectedAnswer: string) => (\n    <SmartTextField\n      position={position++}\n      label={label}\n      expectedAnswer={expectedAnswer}\n      correctCount={correctCount}\n      onCorrect={onCorrect}\n    />\n  )\n  return (\n    <div className=\"App\">\n      <Typography variant={'h3'}>Happy Birthday Filipa</Typography>\n      <Typography variant={'h4'}>\n        15 Jahre\n        <br />\n        15 Fragen\n        <br />\n        <CakeIcon style={{ color: 'deeppink' }} />\n      </Typography>\n      <form className={classes.form} noValidate autoComplete=\"o'f\">\n        {tf('Check, Check: Wie heisst Du?', 'Filipa')}\n        {tf('Dein Geburtsgewicht (in g)?', '2650')}\n        {tf('Wie viele ganze Tage bist Du alt?', '5478')}\n        {tf('Wie hiess Deine Hebamme?', 'Aline')}\n        {tf('Wie hiess Dein Pl√ºsch-Pferd?', 'Fanny')}\n        {tf(\"So, chli Schach ‚Äì Queen's Gambit!\", 'c4')}\n        {tf('Augen zu ‚Äì was schmeckst Du?', 'Cola')}\n        {tf('Schoggi oder Chips?', 'Chips')}\n        {tf('Wenn E=m*c*c, dann E/(c*c)=', 'm')}\n        {tf('Minecraft oder Candy Crush?', 'Minecraft')}\n        {tf(\"Los geht's! 5.83.169.28:10260\", '3')}\n        {tf('R√§zel Nr 2', 'Nein')}\n        {tf('R√§zel Nr 3', '1')}\n        {tf('Bus oder Velo?', 'Velo')}\n        {tf('Die Antwort auf alles?', '42')}\n        {correctCount >= position && (\n          <Alert severity=\"success\" icon={false}>\n            <AlertTitle>Yay ‚Äì Geschafft!</AlertTitle>47.47543353465387, 7.742019610119889\n            <br />\n            <br />\n            üçüüòãüéÇ\n          </Alert>\n        )}\n      </form>\n    </div>\n  )\n}\n\ninterface Props {\n  readonly position: number\n  readonly label: string\n  readonly expectedAnswer: string\n  readonly correctCount: number\n  readonly onCorrect: () => void\n}\n\nconst SmartTextField = ({ position, label, expectedAnswer, correctCount, onCorrect }: Props) => {\n  const hidden = correctCount < position\n  const isAlreadyCorrect = correctCount > position\n  const [value, setValue] = useState<string>('')\n  const onChange = (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    const v = e.target.value\n    if (v.toLowerCase() === expectedAnswer.toLowerCase() && !isAlreadyCorrect) {\n      onCorrect()\n    }\n    setValue(v)\n  }\n  return (\n    <Hidden xlDown={hidden}>\n      <TextField\n        value={value}\n        label={`${position + 1}. ${label}`}\n        onChange={onChange}\n        InputProps={{\n          readOnly: isAlreadyCorrect,\n          endAdornment: isAlreadyCorrect ? (\n            <CheckIcon style={{ color: 'green' }} />\n          ) : (\n            value !== '' && <ErrorIcon style={{ color: 'orange' }} />\n          ),\n        }}\n      />\n    </Hidden>\n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}